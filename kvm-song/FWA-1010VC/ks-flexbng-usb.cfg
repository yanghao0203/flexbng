#version=RHEL7
# System authorization information
auth --enableshadow --passalgo=sha512
# Install OS instead of upgrade
install

# Use usb/cdrom devices
%include /tmp/source.ks

# Install with text or graphical mode
# Use text mode install
text
# Use graphical mode install
#graphical


# Firewall configuration
firewall --disabled
# SELinux configuration
selinux --disabled
# Ignore unsupported hardware warning
unsupported_hardware
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8
# Reboot after installation
reboot

# Network information
# Dev name is not sure, so don't configure network
#network  --bootproto=dhcp --device=eno16777736 --hostname=flexbng
# Root password
rootpw --plaintext 123456
# System services
services --disabled="chronyd NetworkManager"
services --enabled="network"

# Do not configure the X Window System
skipx
# System timezone
timezone Asia/Shanghai --isUtc --nontp

# Partition clearing information
#clearpart --all --initlabel

# System bootloader configuration
%include /tmp/bootloader.ks

# NEVER ever place zerombr here, it breaks automated installation
%include /tmp/partition.ks

%packages
@backup-server
@base
@core
kexec-tools
gcc
make
java-1.7.0-openjdk
kernel-devel
kernel-headers
libvirt
qemu-kvm
ntp
tree
lrzsz
telnet
libguestfs-tools
dos2unix
numactl
%end

%addon com_redhat_kdump --disable --reserve-mb='auto'

%end


# PREINSTALL SECTION
# HERE ARE COMMANDS THAT WILL BE LAUNCHED BEFORE
# INSTALLATION PROCESS ITSELF
%pre
#!/bin/sh

# hard drives
drives=""
removable_drives=""

#########################################################
# partition type (MBR or GPT)
#########################################################
PART_TYPE="MBR"

# weiyc: get all devices except "Flexbng"
for drv in `ls -1 /sys/block | grep "sd\|hd\|vd\|cciss"`; do
    if !(blkid | grep -q "${drv}.*Flexbng"); then
        if (grep -q 0 /sys/block/${drv}/removable); then
            drives="${drives} ${drv}"
        else
            removable_drives="${removable_drives} ${drv}"
        fi
    fi
done
default_drive=`echo ${drives} ${removable_drives} | awk '{print $1}'`

installdrive=${installdrive:-undefined}
forceformat=${forceformat:-no}
tgtdrive="${installdrive}"

set ${drives} ${removable_drives}
numdrives=`echo $#`

# weiyc: ask for format disk
function confirm_format {
    check_drive="$1"
    local confirm_format="no"

    if [[ "$forceformat" == "yes" ]] ; then
        return 0
    fi

    if parted -s /dev/$check_drive print &>/dev/null ; then
        echo
        echo "$check_drive drive contains partition table:"
        parted -s /dev/$check_drive print
        echo
        #read -p "Are you sure you want to erase ALL data on disk $check_drive? (y/N)" confirm_format
        confirm_format=y
        if [[ "$confirm_format" == "y" ]] || [[ "$confirm_format" == "Y" ]] || [[ "$forceformat" == "yes" ]]; then
            return 0
        else
            return 1
        fi
    else
        return 0
    fi
}

# weiyc: (1) numdrives < 1, no suitable media available for installation
if [ $numdrives -lt 1 ]; then
    #exec < /dev/tty3 > /dev/ttyS0 2>&1
    #chvt 3
    #clear
    echo
    echo '********************************************************************'
    echo '*                            E R R O R                             *'
    echo '*                                                                  *'
    echo '*      There is no suitable media available for installation.      *'
    echo '*                Please attach a drive and try again.              *'
    echo '*                                                                  *'
    echo '********************************************************************'
    echo
    read -p "Press Enter to shut down the system: " _
    poweroff
fi


# weiyc: (2) (numdrives > 1) || (only one device is removable)
format_confirmed="no"
if [ ${numdrives} -gt 1 ] || [ `echo ${drives} | wc -w` -eq 0 ] ; then
    #exec < /dev/tty3 > /dev/ttyS0 2>&1
    #chvt 3
    while [ "${tgtdrive}" = "undefined" ]; do
     #   clear
        echo
        echo '********************************************************************************'
        echo '*                                 W A R N I N G                                *'
        echo '*                                                                              *'
        echo '*  Which of the detected hard drives do you want to be used as                 *'
        echo '*  the installation target?                                                    *'
        echo '*                                                                              *'
        echo '********************************************************************************'
        echo
        echo "Possible choices"
        echo "Persistent drives: ${drives}"
        echo "Removable drives: ${removable_drives}"
        echo
        if [ `echo ${drives} | wc -w` -eq 1 ] ; then
            read -t 30 -p "Choose hard drive: " tgtdrive || tgtdrive=$default_drive
        else
            read -p "Choose hard drive: " tgtdrive
        fi
        match="no"
        for drive in ${drives[@]} ${removable_drives[@]}; do
            if [[ "$drive" == "$tgtdrive" ]] && match="yes" ; then
                if confirm_format $tgtdrive ; then
                    format_confirmed="yes"
                    break
                else
                    tgtdrive="undefined"
                    read -p "You may select another disk. Press Enter to continue." _
                fi
            fi
        done
        if [[ "$match" == "no" ]]; then
            tgtdrive="undefined"
            read -p "Invalid choice. Press Enter to continue." _
        fi
    done
   # clear
   # chvt 1
else
# weiyc: (3) (numdrives == 1) && (not removable device)
    tgtdrive=`echo ${drives} | sed -e "s/^\s*//" -e "s/\s*$//"`
fi

# weiyc: need format confirm
if [ "$format_confirmed" != "yes" ] ; then
    #exec < /dev/tty3 > /dev/ttyS0 2>&1
    #chvt 3
    if ! confirm_format $tgtdrive ; then
     #   clear
        echo
        echo '********************************************************************'
        echo '*                            E R R O R                             *'
        echo '*                                                                  *'
        echo '*           Disk $tgtdrive contains active partition(s).           *'
        echo '*        Installation cannot continue without confirmation.        *'
        echo '*                                                                  *'
        echo '********************************************************************'
        echo
        read -p "Press Enter to restart: " _
        reboot
    fi
    #chvt 1
fi

# verify tgtdrive is at least 100GB
tgtdrivesize=$(( $(cat "/sys/class/block/${tgtdrive}/size") / 2 / 1024 ))
if [ $tgtdrivesize -lt 102400 ]; then
    #exec < /dev/tty3 > /dev/ttyS0 2>&1
    #chvt 3
    #clear
    echo
    echo '********************************************************************'
    echo '*                            E R R O R                             *'
    echo '*                                                                  *'
    echo '*  Your disk is under 100GB in size. Installation cannot continue. *'
    echo '*             Restart installation with a larger disk.             *'
    echo '*                                                                  *'
    echo '********************************************************************'
    echo
    read -p "Press Enter to restart: " _
    reboot
fi

if [ "$PART_TYPE" = "MBR" ]; then
    # verify tgtdrive is bigger than 2TB
    if [ $tgtdrivesize -gt 2048000 ]; then
     #   exec < /dev/tty3 > /dev/ttyS0 2>&1
      #  chvt 3
       # clear
        echo
        echo '************************************************************************'
        echo '*                              E R R O R                               *'
        echo '*                                                                      *'
        echo '*  Your disk is bigger than 2TB in size. Installation cannot continue. *'
        echo '*               Restart installation with a larger disk.               *'
        echo '*                                                                      *'
        echo '************************************************************************'
        echo
        read -p "Press Enter to restart: " _
        reboot
    fi
fi

# paths in /dev have "/" instead of "!" for cciss devices
tgtdrive=$(echo $tgtdrive | sed -e 's/!/\//')

# source
iso_volume_id=Flexbng

cdrom_device=
if [ -e /proc/sys/dev/cdrom/info ]; then
    cdrom_device=$(cat /proc/sys/dev/cdrom/info | awk '/drive name:/{print $3}')
fi

if [ -e /dev/disk/by-label/${iso_volume_id} ]; then
    real_device=$(readlink -e /dev/disk/by-label/${iso_volume_id})
    if [ "${real_device}" == "/dev/${cdrom_device}" ]; then
        echo "cdrom" > /tmp/source.ks
    else
        echo "harddrive --partition=LABEL=${iso_volume_id} --dir=/" > /tmp/source.ks
    fi
else
    echo "cdrom" > /tmp/source.ks
fi

#########################################################
# MBR partition
#########################################################
if [ "$PART_TYPE" = "MBR" ]; then

#########################################################
# bootloader (CPU && MEMORY must modify)
#########################################################
echo "bootloader --location=mbr --boot-drive=${tgtdrive} --append='console=tty0 console=ttyS0,115200n8'" > /tmp/bootloader.ks

cat << EOF > /tmp/partition.ks
# Clear the Master Boot Record
zerombr
# Partition clearing information
clearpart --all --drives=${tgtdrive} --initlabel
# Disk partitioning information
part /boot --ondisk=${tgtdrive} --fstype="xfs" --size=500 --asprimary
part pv.01 --ondisk=${tgtdrive} --size=90000 --grow
volgroup os pv.01
logvol swap --vgname=os --recommended --name=swap
logvol /var/log --vgname=os --size=10000 --name=log --fstype=xfs
logvol / --vgname=os --size=80000 --grow --name=root --fstype=xfs

EOF


#########################################################
# GPT partition
#########################################################
else

#########################################################
# bootloader (CPU && MEMORY must modify)
#########################################################
echo "bootloader --driveorder=${tgtdrive} --append='console=tty0 console=ttyS0,115200n8'" > /tmp/bootloader.ks

vgdisplay -c | cut -d':' -f1 | xargs vgremove -ff
dd if=/dev/zero of=/dev/${tgtdrive} bs=10M count=10
sleep 3
hdparm -z /dev/${tgtdrive}
parted -s /dev/${tgtdrive} mklabel gpt
parted -a none -s /dev/${tgtdrive} unit MiB mkpart primary 1 25
parted -s /dev/${tgtdrive} set 1 bios_grub on
parted -a none -s /dev/${tgtdrive} unit MiB mkpart primary fat16 25 225
parted -s /dev/${tgtdrive} set 2 boot on
parted -a none -s /dev/${tgtdrive} unit MiB mkpart primary 225 425
sleep 3
hdparm -z /dev/${tgtdrive}

# This adds support for the p seperator required for cciss devices
if echo ${tgtdrive} | grep -q -e cciss ; then
    bootdev=${tgtdrive}p
else
    bootdev=${tgtdrive}
fi

# Partition info
cat << EOF > /tmp/partition.ks
part /boot --onpart=/dev/${bootdev}3
part /boot/efi --onpart=/dev/${bootdev}2
part pv.01 --ondisk=${tgtdrive} --size=90000 --grow
volgroup os pv.01
logvol swap --vgname=os --recommended --name=swap
logvol /var/log --vgname=os --size=10000 --name=log --fstype=xfs
logvol / --vgname=os --size=80000 --grow --name=root --fstype=xfs

EOF

# Anaconda can not install grub 0.97 on disks which are >4T.
# The reason is that grub does not support such large geometries
# and it simply thinks that the cylinder number has negative value.
# Here we just set geometry manually so that grub thinks that disk
# size is equal to 1G.
# 130 cylinders * (16065 * 512 = 8225280 bytes) = 1G
echo "%post --nochroot --log=/mnt/sysimage/root/anaconda-post-partition.log" >> /tmp/partition.ks
echo "echo \"device (hd0) /dev/${tgtdrive}\" >> /tmp/grub.script" >> /tmp/partition.ks
echo "echo \"geometry (hd0) 130 255 63\" >> /tmp/grub.script" >> /tmp/partition.ks
echo "echo \"root (hd0,2)\" >> /tmp/grub.script" >> /tmp/partition.ks
echo "echo \"install /grub/stage1 (hd0) /grub/stage2 p /grub/grub.conf\" >> /tmp/grub.script" >> /tmp/partition.ks
echo "echo quit >> /tmp/grub.script" >> /tmp/partition.ks
echo "cat /tmp/grub.script | chroot /mnt/sysimage /sbin/grub --no-floppy --batch" >> /tmp/partition.ks
echo "%end" >> /tmp/partition.ks
fi

%end


# POSTINSTALL SECTIONS
# HERE ARE COMMANDS THAT WILL BE LAUNCHED JUST AFTER
# INSTALLATION ITSELF COMPLETED

# Mount installation media in chroot
%post --nochroot --log=/mnt/sysimage/root/anaconda-post-before-chroot.log
#!/bin/bash
set -x

SOURCE="/mnt/sysimage/tmp/source"
mkdir -p "${SOURCE}"

if [ -d "/mnt/source" ]; then
    mount -o bind "/mnt/source" "${SOURCE}"
fi

# If still not mounted, try to mount from LABEL / UUID.
# It was moved from next phase here to keep all mounting stuff
# in one place. All other scripts should use SOURCE variable
# for access to dist files.
iso_volume_id=Flexbng
FS="/mnt/sysimage/tmp/fs"

if ! mountpoint -q "${SOURCE}"; then
    if [ -e "/dev/disk/by-label/${iso_volume_id}" ]; then
        mount "/dev/disk/by-label/${iso_volume_id}" "${SOURCE}"
    fi
fi

# Sleep to capture full log
sleep 1
%end

%post --log=/tmp/flexbng/anaconda-post-install.log
#!/bin/bash
# Activate debugging from here
set -x

SOURCE=/tmp/source

# Set hostname
echo "flexbng" > /etc/hostname

# build identifiers
test -e ${SOURCE}/flexbng_build_version && cp ${SOURCE}/flexbng_build_version /etc/flexbng_build_version

# Create download dir
mkdir -p /tmp/flexbng

# Get script
cp ${SOURCE}/extra/kvm-song/FWA-1010VC/fetch-res.sh /tmp/flexbng/
cp ${SOURCE}/extra/kvm-song/FWA-1010VC/install-basic.sh /tmp/flexbng/

# Exec fetch resource script
cd /tmp/flexbng/
test -e fetch-res.sh && /bin/sh fetch-res.sh "local" "$SOURCE/extra"
test -e install-basic.sh && /bin/sh install-basic.sh

# Unmounting source
cd /tmp
umount -f ${SOURCE}
rm -rf ${SOURCE}

%end
